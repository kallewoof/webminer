# Copyright (c) 2022 Mark Friedenbach
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "async",
    hdrs = [
        "async.h",
    ],
    srcs = [
        "async.cc",
    ],
    deps = [
        "@com_google_absl//absl/flags:flag",
    ],
)

cc_library(
    name = "common",
    defines = select({
        "@bazel_tools//src/conditions:windows": ["WIN32"],
        "//conditions:default": [],
    }),
    hdrs = [
        "compat/byteswap.h",
        "compat/cpuid.h",
        "compat/endian.h",
        "crypto/common.h",
        "support/allocators/secure.h",
        "support/cleanse.h",
        "support/lockedpool.h",
        "util/macros.h",
    ],
    srcs = [
        "support/cleanse.cc",
        "support/lockedpool.cc",
    ],
)

cc_library(
    name = "chacha20",
    hdrs = [
        "crypto/chacha20.h",
    ],
    srcs = [
        "crypto/chacha20.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "random",
    defines = select({
        "@bazel_tools//src/conditions:windows": ["WIN32"],
        "//conditions:default": [],
    }),
    hdrs = [
        "random.h",
        "randomenv.h",
    ],
    srcs = [
        "random.cc",
        "randomenv.cc",
    ],
    deps = [
        "@com_google_absl//absl/time:time",
        ":chacha20",
        ":sha2",
        ":sync",
        ":uint256",
    ],
)

cc_library(
    name = "sha2",
    copts = select({
        "@platforms//cpu:x86_64": [
            "-msse4",
            "-msse4.1",
            "-mavx2",
            "-msha",
        ],
        "@platforms//cpu:arm64": [
            "-march=armv8-a+crc+crypto",
        ],
        "//conditions:default": [],
    }),
    hdrs = [
        "crypto/hmac_sha512.h",
        "crypto/sha256.h",
        "crypto/sha512.h",
    ],
    srcs = [
        "crypto/hmac_sha512.cc",
        "crypto/sha256.cc",
        "crypto/sha256_sse4.cc",
        "crypto/sha256_sse41.cc",
        "crypto/sha256_avx2.cc",
        "crypto/sha256_shani.cc",
        "crypto/sha256_armv8.cc",
        "crypto/sha512.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "sqlite3",
    defines = [
        "SQLITE_OMIT_LOAD_EXTENSION",
    ],
    hdrs = [
        "sqlite3.h",
        "sqlite_orm.h",
    ],
    srcs = [
        "sqlite3.c",
    ],
)

cc_library(
    name = "sync",
    hdrs = [
        "sync.h",
        "threadsafety.h",
    ],
    srcs = [
        "sync.cc",
    ],
    deps = [
        ":common",
    ],
)

cc_library(
    name = "uint256",
    hdrs = [
        "uint256.h",
    ],
    srcs = [
        "uint256.cc",
    ],
    deps = [
        "@com_google_absl//absl/strings:strings",
    ],
)

cc_library(
    name = "wallet",
    hdrs = [
        "wallet.h",
    ],
    srcs = [
        "wallet.cc",
    ],
    deps = [
        "@boost//:filesystem",
        "@boost//:interprocess",
        "@com_google_absl//absl/strings:strings",
        "@com_google_absl//absl/time:time",
        ":webcash",
        ":sqlite3",
    ]
)

cc_library(
    name = "webcash",
    hdrs = [
        "webcash.h",
    ],
    srcs = [
        "webcash.cc",
    ],
    deps = [
        "@com_google_absl//absl/strings:strings",
        "@com_google_absl//absl/numeric:int128",
        ":sha2",
        ":uint256",
    ]
)

cc_test(
    name = "wallet_tests",
    size = "small",
    srcs = [
        "test/wallet.cc",
    ],
    deps = [
        "@com_google_googletest//:gtest_main",
        ":wallet",
    ]
)

load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name = "bench_webcash",
    srcs = [
        "webcash_bench.cc",
    ],
    deps = [
        "@com_google_benchmark//:benchmark",
        "@com_google_benchmark//:benchmark_main",
        ":webcash",
    ],
)

cc_binary(
    name = "webcashd",
    srcs = ["webcashd.cc"],
    deps = [
        "@boost//:filesystem",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/numeric:int128",
        "@com_google_absl//absl/strings:strings",
        "@com_google_absl//absl/time:time",
        ":async",
        ":drogon",
        ":sha2",
        ":sync",
        ":uint256",
        ":webcash",
    ],
)

cc_binary(
    name = "webminer",
    srcs = ["webminer.cc"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/numeric:int128",
        "@com_google_absl//absl/strings:strings",
        "@com_google_absl//absl/time:time",
        ":async",
        ":cpp_http",
        ":random",
        ":sha2",
        ":sync",
        ":uint256",
        ":univalue",
        ":wallet",
        ":webcash",
    ],
)

load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

cmake(
    name = "cpp_http",
    deps = [
        "@boringssl//:ssl",
    ],
    lib_source = "@cpp_http//:all_srcs",
    install = True,
    out_headers_only = True,
)

cmake(
    name = "drogon",
    deps = [
        "@boost//:filesystem",
        "@brotli//:brotlidec",
        "@brotli//:brotlienc",
        "@jsoncpp//:jsoncpp",
        ":hiredis",
        ":sqlite3",
        ":zlib",
    ],
    lib_source = "@drogon//:all_srcs",
    install = True,
    out_static_libs = ["libdrogon.a", "libtrantor.a"],
)

cmake(
    name = "hiredis",
    lib_source = "@hiredis//:all_srcs",
    install = True,
    out_static_libs = ["libhiredis.a"],
)

configure_make(
    name = "univalue",
    configure_in_place = True, # Required by autogen=True
    autogen = True,
    env = {
        "AR": "",
    },
    lib_source = "@univalue//:all_srcs",
    out_static_libs = ["libunivalue.a"],
)

cmake(
    name = "zlib",
    lib_source = "@zlib//:all_srcs",
    install = True,
    out_static_libs = ["libz.a"],
)

# End of File
